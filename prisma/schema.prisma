generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Activite {
    id        String    @id @default(uuid())
    code      String    @unique
    libelle   String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt

    ActiviteCI ActiviteCI[]
}

model ActiviteCI {
    id                   String           @id @default(uuid())
    codeActivite         String
    codeCentreImputation String
    createdAt            DateTime         @default(now())
    updatedAt            DateTime?        @default(now()) @updatedAt
    activite             Activite         @relation(fields: [codeActivite], references: [code])
    centreImputation     CentreImputation @relation(fields: [codeCentreImputation], references: [code])
}

model Agent {
    id                   String              @id @default(uuid())
    matricule            String?
    nom                  String?
    prenom               String?
    numCNPS              String?
    localisation         String?
    email                String?
    codeSociete          String?
    exploitation         String?
    adresse              String?
    codeStatut           String?
    lastUser             String?
    lastDate             String?
    telephone            String?
    nomReseau            String?
    codeCategorieAgent   String?
    codeFonctionAgent    String?
    codeZoneIntervention String?
    isResponsableCI      Boolean
    createdAt            DateTime?           @default(now())
    updatedAt            DateTime?           @default(now()) @updatedAt
    societe              Societe?            @relation(fields: [codeSociete], references: [code])
    categorieAgent       CategorieAgent?     @relation(fields: [codeCategorieAgent], references: [code])
    AgentSession         AgentSession[]
    Approvisionnement    Approvisionnement[]
    Reversement          Reversement[]
    Bon_Beneficiaire     BonMission[]        @relation(name: "beneficiaire_bon")
    Bon_Emetteur         BonMission[]        @relation(name: "emetteur_bon")
    zoneIntervention     ZoneIntervention?   @relation(fields: [codeZoneIntervention], references: [code])
}

model AgentSession {
    id        String    @id @default(uuid())
    agentId   String
    token     String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    agent     Agent     @relation(fields: [agentId], references: [id])
}

model Approvisionnement {
    id             String    @id @default(uuid())
    caisseId       String
    userId         String
    beneficiaireId String
    numeroBon      String
    montant        Float
    motif          String
    status         String
    createdAt      DateTime  @default(now())
    updatedAt      DateTime? @default(now()) @updatedAt
    caisse         Caisse    @relation(fields: [caisseId], references: [id])
    user           User      @relation(fields: [userId], references: [id])
    beneficiaire   Agent     @relation(fields: [beneficiaireId], references: [id])
}

model Attribution {
    id                String              @id @default(uuid())
    userId            String
    dateDebut         DateTime
    dateFin           DateTime
    createdAt         DateTime            @default(now())
    updatedAt         DateTime?           @default(now()) @updatedAt
    user              User                @relation(fields: [userId], references: [id])
    AttributionCaisse AttributionCaisse[]
}

model AttributionCaisse {
    id            String      @id @default(uuid())
    caisseId      String
    attributionId String
    status        String
    userId        String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime?   @default(now()) @updatedAt
    caisse        Caisse      @relation(fields: [caisseId], references: [id])
    user          User        @relation(fields: [userId], references: [id])
    attribution   Attribution @relation(fields: [attributionId], references: [id])
}

model BonMission {
    id                     String          @id @default(uuid())
    numeroBon              String          @unique
    motif                  String
    serviceEmetteur        String
    beneficiaireId         String
    matricule              String?
    nom                    String
    zoneIntervention       String
    mandataire             Boolean
    emetteurId             String
    typeMission            String
    codeMoyenTransport     String
    ordonnateurMission     String
    dateDepart             DateTime
    dateArrivee            DateTime
    itineraireMultiple     Boolean
    status                 String
    depart                 String
    arrivee                String
    itineraireId           String
    typeCarburant          String
    tauxKilometrique       Int
    complementKilometrique Int
    distanceCalculee       Int
    indemniteKilometrique  Int
    tarifsTransportCommun  Int
    complementTransport    Int
    fraisDeplacement       Int
    nombreRepas            Int
    nombreNuitees          Int
    prixRestauration       Float
    prixHebergement        Float
    montantRestauration    Float
    totalOrdreMission      Float
    exploitation           String
    activite               String
    indiceTiers            String
    codePartenaire         String
    pieceJointe            String
    texteAnnexe            String
    justify                Boolean
    createdAt              DateTime        @default(now())
    updatedAt              DateTime?       @default(now()) @updatedAt
    beneficiaire           Agent           @relation(name: "beneficiaire_bon", fields: [beneficiaireId], references: [id])
    emetteur               Agent           @relation(name: "emetteur_bon", fields: [emetteurId], references: [id])
    moyenTransport         MoyenTransport  @relation(fields: [codeMoyenTransport], references: [code])
    justification          Justification[]
}

model Caisse {
    id                String              @id @default(uuid())
    code              String
    libelle           String
    lieu              String
    posteId           String
    userId            String
    status            String
    createdAt         DateTime            @default(now())
    updatedAt         DateTime?           @default(now()) @updatedAt
    poste             Poste               @relation(fields: [posteId], references: [id])
    user              User                @relation(fields: [userId], references: [id])
    approvisionnement Approvisionnement[]
    attributionCaisse AttributionCaisse[]
    Reversement       Reversement[]
}

model CategorieAgent {
    id          String        @id @default(uuid())
    code        String        @unique
    libelle     String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime?     @default(now()) @updatedAt
    Agent       Agent[]
    GrilleFrais GrilleFrais[]
}

model CentreImputation {
    id         String    @id @default(uuid())
    code       String    @unique
    libelle    String
    codeEntite String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime? @default(now()) @updatedAt

    ActiviteCI ActiviteCI[]

    Exploitation Exploitation[]
}

model Compte {
    id           String         @id @default(uuid())
    numero       String
    libelle      String
    status       String?        @default("active")
    userId       String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime?      @default(now()) @updatedAt
    user         User           @relation(fields: [userId], references: [id])
    NatureCompte NatureCompte[]
}

model ConfigurationSchema {
    id              String            @id @default(uuid())
    code            String
    libelle         String
    createdAt       DateTime          @default(now())
    updatedAt       DateTime?         @default(now()) @updatedAt
    SchemaComptable SchemaComptable[]
}

model Delegation {
    id         String    @id @default(uuid())
    dateDebut  DateTime
    dateFin    DateTime
    delegateTo String
    userId     String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime? @default(now()) @updatedAt
    user       User      @relation(fields: [userId], references: [id])
}

model DepartArrive {
    id                 String               @id @default(uuid())
    codeItineraire     String               @unique
    libelleItineraire  String
    codeDepart         String
    codeArrive         String
    codeTypeDepart     String
    codeTypeArrivee    String
    codeTypeMission    String
    createdAt          DateTime             @default(now())
    updatedAt          DateTime?            @default(now()) @updatedAt
    typeMission        TypeMission          @relation(fields: [codeTypeMission], references: [code])
    villeDepart        Ville                @relation(name: "Trajets_Depart", fields: [codeDepart], references: [code])
    villeArrive        Ville                @relation(name: "Trajets_Arrive", fields: [codeArrive], references: [code])
    ItineraireDistance ItineraireDistance[]
}

model Example {
    id        String    @id @default(uuid())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
}

model Exploitation {
    id                 String           @id @default(uuid())
    code               String           @unique
    libelle            String
    centreImputationId String
    createdAt          DateTime         @default(now())
    updatedAt          DateTime?        @default(now()) @updatedAt
    centreImputation   CentreImputation @relation(fields: [centreImputationId], references: [id])
}

model File {
    id        String    @id @default(uuid())
    name      String
    path      String
    bin       String
    size      Float
    type      String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
}

model Fonction {
    id                 String               @id @default(uuid())
    code               String               @unique
    libelle            String
    createdAt          DateTime             @default(now())
    updatedAt          DateTime?            @default(now()) @updatedAt
    GrilleKilometrique GrilleKilometrique[]
}

model GrilleFrais {
    id                 String         @id @default(uuid())
    codeCategorieAgent String
    codeTypeFrais      String
    montant            Float
    createdAt          DateTime       @default(now())
    updatedAt          DateTime?      @default(now()) @updatedAt
    categorieAgent     CategorieAgent @relation(fields: [codeCategorieAgent], references: [code])
    typeFrais          TypeFrais      @relation(fields: [codeTypeFrais], references: [code])
}

model GrilleKilometrique {
    id                String        @id @default(uuid())
    codeFonction      String
    codeTypeCarburant String
    valeurTauxKm      Int
    createdAt         DateTime      @default(now())
    updatedAt         DateTime?     @default(now()) @updatedAt
    fonction          Fonction      @relation(fields: [codeFonction], references: [code])
    typeCarburant     TypeCarburant @relation(fields: [codeTypeCarburant], references: [code])
}

model ItineraireDistance {
    id             String       @id @default(uuid())
    codeItineraire String
    matricule      String?
    distance       Float
    enVigueur      Float
    createdAt      DateTime     @default(now())
    updatedAt      DateTime?    @default(now()) @updatedAt
    departArrive   DepartArrive @relation(fields: [codeItineraire], references: [codeItineraire])
}

model Justification {
    id             String       @id @default(uuid())
    numeroBon      String
    dateDepart     DateTime
    dateArrivee    DateTime
    urlPJ          String
    late           Boolean
    limitDate      DateTime
    status         String
    organisationId String
    userId         String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime?    @default(now()) @updatedAt
    organisation   Organisation @relation(fields: [organisationId], references: [id])
    user           User         @relation(fields: [userId], references: [id])
    bonMission     BonMission   @relation(fields: [numeroBon], references: [numeroBon])
}

model MoyenTransport {
    id         String       @id @default(uuid())
    code       String       @unique
    libelle    String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime?    @default(now()) @updatedAt
    BonMission BonMission[]
}

model Nature {
    id           String         @id @default(uuid())
    status       String
    libelle      String
    userId       String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime?      @default(now()) @updatedAt
    user         User           @relation(fields: [userId], references: [id])
    NatureCompte NatureCompte[]
}

model NatureCompte {
    id        String    @id @default(uuid())
    compteId  String
    natureId  String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    compte    Compte    @relation(fields: [compteId], references: [id])
    nature    Nature    @relation(fields: [natureId], references: [id])
}

model Numbon {
    id        String    @id @default(uuid())
    prefix    String
    isUsed    Boolean
    numeroBon String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
}

model Organisation {
    id            String          @id @default(uuid())
    name          String
    status        String          @default("active")
    userId        String?
    societyId     String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime?       @default(now()) @updatedAt
    user          User?           @relation(fields: [userId], references: [id])
    societe       Societe?        @relation(fields: [societyId], references: [id])
    Justification Justification[]
    Profil        Profil[]
}

model Password {
    id        String    @id @default(uuid())
    value     String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    user      User?
}

model Poste {
    id        String    @id @default(uuid())
    libelle   String
    adresseip String
    status    String
    userId    String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    user      User      @relation(fields: [userId], references: [id])
    Caisse    Caisse[]
}

model Profil {
    id             String       @id @default(uuid())
    isDefault      Boolean?     @default(false)
    organisationId String
    roleId         String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime?    @default(now()) @updatedAt
    organisation   Organisation @relation(fields: [organisationId], references: [id])
    role           Role         @relation(fields: [roleId], references: [id])
    User           User[]
}

model Reversement {
    id              String    @id @default(uuid())
    caisseId        String
    userId          String
    beneficiaireId  String
    numeroBon       String
    montant         Float
    motif           String
    dateReversement DateTime
    typeReversement String
    createdAt       DateTime  @default(now())
    updatedAt       DateTime? @default(now()) @updatedAt
    caisse          Caisse    @relation(fields: [caisseId], references: [id])
    user            User      @relation(fields: [userId], references: [id])
    beneficiaire    Agent     @relation(fields: [beneficiaireId], references: [id])
}

model Role {
    id        String    @id @default(uuid())
    name      String
    status    String    @default("active")
    userId    String?
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    Profil    Profil[]

    User User[]
}

model SchemaComptable {
    id              String              @id @default(uuid())
    configurationId String
    libelle         String
    status          String
    userId          String
    createdAt       DateTime            @default(now())
    updatedAt       DateTime?           @default(now()) @updatedAt
    configuration   ConfigurationSchema @relation(fields: [configurationId], references: [id])
    user            User                @relation(fields: [userId], references: [id])
}

model Societe {
    id           String         @id @default(uuid())
    slug         String?
    name         String?
    code         String?        @unique
    status       String         @default("active")
    userId       String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime?      @default(now()) @updatedAt
    user         User?          @relation(fields: [userId], references: [id])
    Agent        Agent[]
    Organisation Organisation[]
}

model TypeCarburant {
    id                 String               @id @default(uuid())
    code               String               @unique
    libelle            String
    createdAt          DateTime             @default(now())
    updatedAt          DateTime?            @default(now()) @updatedAt
    GrilleKilometrique GrilleKilometrique[]
}

model TypeFrais {
    id          String        @id @default(uuid())
    code        String        @unique
    libelle     String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime?     @default(now()) @updatedAt
    GrilleFrais GrilleFrais[]
}

model TypeMission {
    id        String    @id @default(uuid())
    code      String    @unique
    libelle   String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt

    DepartArrive DepartArrive[]
}

model User {
    id                String              @id @default(uuid())
    email             String              @unique
    firstname         String?
    lastname          String?
    matricule         String?
    status            String              @default("active")
    roleId            String?
    isEmailConfirmed  Boolean             @default(false)
    profileId         String?
    userId            String?
    passwordId        String?             @unique
    lastLoginDate     DateTime?           @default(now())
    createdAt         DateTime            @default(now())
    updatedAt         DateTime?           @default(now()) @updatedAt
    profile           Profil?             @relation(fields: [profileId], references: [id])
    role              Role?               @relation(fields: [roleId], references: [id])
    password          Password?           @relation(fields: [passwordId], references: [id])
    Approvisionnement Approvisionnement[]
    AttributionCaisse AttributionCaisse[]
    Caisse            Caisse[]
    Compte            Compte[]
    Delegation        Delegation[]
    Justification     Justification[]
    Nature            Nature[]
    Organisation      Organisation[]
    Poste             Poste[]
    Reversement       Reversement[]
    SchemaComptable   SchemaComptable[]
    Societe           Societe[]
    Attribution       Attribution[]
    UserSession       UserSession[]
}

model UserPriority {
    id        String    @id @default(uuid())
    code      String    @unique
    libelle   String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
}

model UserSession {
    id        String    @id @default(uuid())
    userId    String
    token     String    @unique
    startDate DateTime
    duration  DateTime
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    user      User      @relation(fields: [userId], references: [id])
}

model Ville {
    id             String         @id @default(uuid())
    code           String         @unique
    libelle        String
    codePays       String
    createdAt      DateTime       @default(now())
    updatedAt      DateTime?      @default(now()) @updatedAt
    Trajets_Depart DepartArrive[] @relation(name: "Trajets_Depart")
    Trajets_Arrive DepartArrive[] @relation(name: "Trajets_Arrive")
}

model ZoneIntervention {
    id        String    @id @default(uuid())
    code      String    @unique
    libelle   String
    typeLieu  String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    Agent     Agent[]
}
